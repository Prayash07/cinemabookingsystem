package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.26

import (
	"context"
	"fmt"

	"github.com/Prayash07/cinemabookingsystem/graph/model"
)

// SetCustomer is the resolver for the setCustomer field.
func (r *mutationResolver) SetCustomer(ctx context.Context, input model.CustomerObject) (*model.Customer, error) {
	panic(fmt.Errorf("not implemented: SetCustomer - setCustomer"))
}

// SetFilm is the resolver for the setFilm field.
func (r *mutationResolver) SetFilm(ctx context.Context, input *model.FilmObject) (*model.Film, error) {
	panic(fmt.Errorf("not implemented: SetFilm - setFilm"))
}

// Customers is the resolver for the customers field.
func (r *queryResolver) Customers(ctx context.Context) ([]*model.Customer, error) {
	panic(fmt.Errorf("not implemented: Customers - customers"))
}

// Customer is the resolver for the customer field.
func (r *queryResolver) Customer(ctx context.Context, id string) (*model.Customer, error) {
	panic(fmt.Errorf("not implemented: Customer - customer"))
}

// Films is the resolver for the films field.
func (r *queryResolver) Films(ctx context.Context) ([]*model.Film, error) {
	panic(fmt.Errorf("not implemented: Films - films"))
}

// Film is the resolver for the film field.
func (r *queryResolver) Film(ctx context.Context, id string) (*model.Film, error) {
	panic(fmt.Errorf("not implemented: Film - film"))
}

// Rooms is the resolver for the rooms field.
func (r *queryResolver) Rooms(ctx context.Context) ([]*model.Room, error) {
	panic(fmt.Errorf("not implemented: Rooms - rooms"))
}

// Room is the resolver for the room field.
func (r *queryResolver) Room(ctx context.Context, id string) (*model.Room, error) {
	panic(fmt.Errorf("not implemented: Room - room"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
