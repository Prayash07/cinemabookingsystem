// Code generated by SQLBoiler 4.14.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Screening is an object representing the database table.
type Screening struct {
	ID        int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	FilmID    int       `boil:"film_id" json:"film_id" toml:"film_id" yaml:"film_id"`
	RoomID    int       `boil:"room_id" json:"room_id" toml:"room_id" yaml:"room_id"`
	StartTime time.Time `boil:"start_time" json:"start_time" toml:"start_time" yaml:"start_time"`

	R *screeningR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L screeningL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ScreeningColumns = struct {
	ID        string
	FilmID    string
	RoomID    string
	StartTime string
}{
	ID:        "id",
	FilmID:    "film_id",
	RoomID:    "room_id",
	StartTime: "start_time",
}

var ScreeningTableColumns = struct {
	ID        string
	FilmID    string
	RoomID    string
	StartTime string
}{
	ID:        "screenings.id",
	FilmID:    "screenings.film_id",
	RoomID:    "screenings.room_id",
	StartTime: "screenings.start_time",
}

// Generated where

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var ScreeningWhere = struct {
	ID        whereHelperint
	FilmID    whereHelperint
	RoomID    whereHelperint
	StartTime whereHelpertime_Time
}{
	ID:        whereHelperint{field: "`screenings`.`id`"},
	FilmID:    whereHelperint{field: "`screenings`.`film_id`"},
	RoomID:    whereHelperint{field: "`screenings`.`room_id`"},
	StartTime: whereHelpertime_Time{field: "`screenings`.`start_time`"},
}

// ScreeningRels is where relationship names are stored.
var ScreeningRels = struct {
	Film     string
	Room     string
	Bookings string
}{
	Film:     "Film",
	Room:     "Room",
	Bookings: "Bookings",
}

// screeningR is where relationships are stored.
type screeningR struct {
	Film     *Film        `boil:"Film" json:"Film" toml:"Film" yaml:"Film"`
	Room     *Room        `boil:"Room" json:"Room" toml:"Room" yaml:"Room"`
	Bookings BookingSlice `boil:"Bookings" json:"Bookings" toml:"Bookings" yaml:"Bookings"`
}

// NewStruct creates a new relationship struct
func (*screeningR) NewStruct() *screeningR {
	return &screeningR{}
}

func (r *screeningR) GetFilm() *Film {
	if r == nil {
		return nil
	}
	return r.Film
}

func (r *screeningR) GetRoom() *Room {
	if r == nil {
		return nil
	}
	return r.Room
}

func (r *screeningR) GetBookings() BookingSlice {
	if r == nil {
		return nil
	}
	return r.Bookings
}

// screeningL is where Load methods for each relationship are stored.
type screeningL struct{}

var (
	screeningAllColumns            = []string{"id", "film_id", "room_id", "start_time"}
	screeningColumnsWithoutDefault = []string{"film_id", "room_id", "start_time"}
	screeningColumnsWithDefault    = []string{"id"}
	screeningPrimaryKeyColumns     = []string{"id"}
	screeningGeneratedColumns      = []string{}
)

type (
	// ScreeningSlice is an alias for a slice of pointers to Screening.
	// This should almost always be used instead of []Screening.
	ScreeningSlice []*Screening
	// ScreeningHook is the signature for custom Screening hook methods
	ScreeningHook func(context.Context, boil.ContextExecutor, *Screening) error

	screeningQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	screeningType                 = reflect.TypeOf(&Screening{})
	screeningMapping              = queries.MakeStructMapping(screeningType)
	screeningPrimaryKeyMapping, _ = queries.BindMapping(screeningType, screeningMapping, screeningPrimaryKeyColumns)
	screeningInsertCacheMut       sync.RWMutex
	screeningInsertCache          = make(map[string]insertCache)
	screeningUpdateCacheMut       sync.RWMutex
	screeningUpdateCache          = make(map[string]updateCache)
	screeningUpsertCacheMut       sync.RWMutex
	screeningUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var screeningAfterSelectHooks []ScreeningHook

var screeningBeforeInsertHooks []ScreeningHook
var screeningAfterInsertHooks []ScreeningHook

var screeningBeforeUpdateHooks []ScreeningHook
var screeningAfterUpdateHooks []ScreeningHook

var screeningBeforeDeleteHooks []ScreeningHook
var screeningAfterDeleteHooks []ScreeningHook

var screeningBeforeUpsertHooks []ScreeningHook
var screeningAfterUpsertHooks []ScreeningHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Screening) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range screeningAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Screening) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range screeningBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Screening) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range screeningAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Screening) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range screeningBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Screening) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range screeningAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Screening) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range screeningBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Screening) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range screeningAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Screening) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range screeningBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Screening) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range screeningAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddScreeningHook registers your hook function for all future operations.
func AddScreeningHook(hookPoint boil.HookPoint, screeningHook ScreeningHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		screeningAfterSelectHooks = append(screeningAfterSelectHooks, screeningHook)
	case boil.BeforeInsertHook:
		screeningBeforeInsertHooks = append(screeningBeforeInsertHooks, screeningHook)
	case boil.AfterInsertHook:
		screeningAfterInsertHooks = append(screeningAfterInsertHooks, screeningHook)
	case boil.BeforeUpdateHook:
		screeningBeforeUpdateHooks = append(screeningBeforeUpdateHooks, screeningHook)
	case boil.AfterUpdateHook:
		screeningAfterUpdateHooks = append(screeningAfterUpdateHooks, screeningHook)
	case boil.BeforeDeleteHook:
		screeningBeforeDeleteHooks = append(screeningBeforeDeleteHooks, screeningHook)
	case boil.AfterDeleteHook:
		screeningAfterDeleteHooks = append(screeningAfterDeleteHooks, screeningHook)
	case boil.BeforeUpsertHook:
		screeningBeforeUpsertHooks = append(screeningBeforeUpsertHooks, screeningHook)
	case boil.AfterUpsertHook:
		screeningAfterUpsertHooks = append(screeningAfterUpsertHooks, screeningHook)
	}
}

// OneG returns a single screening record from the query using the global executor.
func (q screeningQuery) OneG(ctx context.Context) (*Screening, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single screening record from the query.
func (q screeningQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Screening, error) {
	o := &Screening{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for screenings")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Screening records from the query using the global executor.
func (q screeningQuery) AllG(ctx context.Context) (ScreeningSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Screening records from the query.
func (q screeningQuery) All(ctx context.Context, exec boil.ContextExecutor) (ScreeningSlice, error) {
	var o []*Screening

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Screening slice")
	}

	if len(screeningAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Screening records in the query using the global executor
func (q screeningQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Screening records in the query.
func (q screeningQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count screenings rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q screeningQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q screeningQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if screenings exists")
	}

	return count > 0, nil
}

// Film pointed to by the foreign key.
func (o *Screening) Film(mods ...qm.QueryMod) filmQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.FilmID),
	}

	queryMods = append(queryMods, mods...)

	return Films(queryMods...)
}

// Room pointed to by the foreign key.
func (o *Screening) Room(mods ...qm.QueryMod) roomQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.RoomID),
	}

	queryMods = append(queryMods, mods...)

	return Rooms(queryMods...)
}

// Bookings retrieves all the booking's Bookings with an executor.
func (o *Screening) Bookings(mods ...qm.QueryMod) bookingQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`bookings`.`screening_id`=?", o.ID),
	)

	return Bookings(queryMods...)
}

// LoadFilm allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (screeningL) LoadFilm(ctx context.Context, e boil.ContextExecutor, singular bool, maybeScreening interface{}, mods queries.Applicator) error {
	var slice []*Screening
	var object *Screening

	if singular {
		var ok bool
		object, ok = maybeScreening.(*Screening)
		if !ok {
			object = new(Screening)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeScreening)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeScreening))
			}
		}
	} else {
		s, ok := maybeScreening.(*[]*Screening)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeScreening)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeScreening))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &screeningR{}
		}
		args = append(args, object.FilmID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &screeningR{}
			}

			for _, a := range args {
				if a == obj.FilmID {
					continue Outer
				}
			}

			args = append(args, obj.FilmID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`films`),
		qm.WhereIn(`films.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Film")
	}

	var resultSlice []*Film
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Film")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for films")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for films")
	}

	if len(filmAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Film = foreign
		if foreign.R == nil {
			foreign.R = &filmR{}
		}
		foreign.R.Screenings = append(foreign.R.Screenings, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FilmID == foreign.ID {
				local.R.Film = foreign
				if foreign.R == nil {
					foreign.R = &filmR{}
				}
				foreign.R.Screenings = append(foreign.R.Screenings, local)
				break
			}
		}
	}

	return nil
}

// LoadRoom allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (screeningL) LoadRoom(ctx context.Context, e boil.ContextExecutor, singular bool, maybeScreening interface{}, mods queries.Applicator) error {
	var slice []*Screening
	var object *Screening

	if singular {
		var ok bool
		object, ok = maybeScreening.(*Screening)
		if !ok {
			object = new(Screening)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeScreening)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeScreening))
			}
		}
	} else {
		s, ok := maybeScreening.(*[]*Screening)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeScreening)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeScreening))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &screeningR{}
		}
		args = append(args, object.RoomID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &screeningR{}
			}

			for _, a := range args {
				if a == obj.RoomID {
					continue Outer
				}
			}

			args = append(args, obj.RoomID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`rooms`),
		qm.WhereIn(`rooms.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Room")
	}

	var resultSlice []*Room
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Room")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for rooms")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for rooms")
	}

	if len(roomAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Room = foreign
		if foreign.R == nil {
			foreign.R = &roomR{}
		}
		foreign.R.Screenings = append(foreign.R.Screenings, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RoomID == foreign.ID {
				local.R.Room = foreign
				if foreign.R == nil {
					foreign.R = &roomR{}
				}
				foreign.R.Screenings = append(foreign.R.Screenings, local)
				break
			}
		}
	}

	return nil
}

// LoadBookings allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (screeningL) LoadBookings(ctx context.Context, e boil.ContextExecutor, singular bool, maybeScreening interface{}, mods queries.Applicator) error {
	var slice []*Screening
	var object *Screening

	if singular {
		var ok bool
		object, ok = maybeScreening.(*Screening)
		if !ok {
			object = new(Screening)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeScreening)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeScreening))
			}
		}
	} else {
		s, ok := maybeScreening.(*[]*Screening)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeScreening)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeScreening))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &screeningR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &screeningR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`bookings`),
		qm.WhereIn(`bookings.screening_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load bookings")
	}

	var resultSlice []*Booking
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice bookings")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on bookings")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for bookings")
	}

	if len(bookingAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Bookings = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &bookingR{}
			}
			foreign.R.Screening = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ScreeningID {
				local.R.Bookings = append(local.R.Bookings, foreign)
				if foreign.R == nil {
					foreign.R = &bookingR{}
				}
				foreign.R.Screening = local
				break
			}
		}
	}

	return nil
}

// SetFilmG of the screening to the related item.
// Sets o.R.Film to related.
// Adds o to related.R.Screenings.
// Uses the global database handle.
func (o *Screening) SetFilmG(ctx context.Context, insert bool, related *Film) error {
	return o.SetFilm(ctx, boil.GetContextDB(), insert, related)
}

// SetFilm of the screening to the related item.
// Sets o.R.Film to related.
// Adds o to related.R.Screenings.
func (o *Screening) SetFilm(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Film) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `screenings` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"film_id"}),
		strmangle.WhereClause("`", "`", 0, screeningPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FilmID = related.ID
	if o.R == nil {
		o.R = &screeningR{
			Film: related,
		}
	} else {
		o.R.Film = related
	}

	if related.R == nil {
		related.R = &filmR{
			Screenings: ScreeningSlice{o},
		}
	} else {
		related.R.Screenings = append(related.R.Screenings, o)
	}

	return nil
}

// SetRoomG of the screening to the related item.
// Sets o.R.Room to related.
// Adds o to related.R.Screenings.
// Uses the global database handle.
func (o *Screening) SetRoomG(ctx context.Context, insert bool, related *Room) error {
	return o.SetRoom(ctx, boil.GetContextDB(), insert, related)
}

// SetRoom of the screening to the related item.
// Sets o.R.Room to related.
// Adds o to related.R.Screenings.
func (o *Screening) SetRoom(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Room) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `screenings` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"room_id"}),
		strmangle.WhereClause("`", "`", 0, screeningPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RoomID = related.ID
	if o.R == nil {
		o.R = &screeningR{
			Room: related,
		}
	} else {
		o.R.Room = related
	}

	if related.R == nil {
		related.R = &roomR{
			Screenings: ScreeningSlice{o},
		}
	} else {
		related.R.Screenings = append(related.R.Screenings, o)
	}

	return nil
}

// AddBookingsG adds the given related objects to the existing relationships
// of the screening, optionally inserting them as new records.
// Appends related to o.R.Bookings.
// Sets related.R.Screening appropriately.
// Uses the global database handle.
func (o *Screening) AddBookingsG(ctx context.Context, insert bool, related ...*Booking) error {
	return o.AddBookings(ctx, boil.GetContextDB(), insert, related...)
}

// AddBookings adds the given related objects to the existing relationships
// of the screening, optionally inserting them as new records.
// Appends related to o.R.Bookings.
// Sets related.R.Screening appropriately.
func (o *Screening) AddBookings(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Booking) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ScreeningID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `bookings` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"screening_id"}),
				strmangle.WhereClause("`", "`", 0, bookingPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ScreeningID = o.ID
		}
	}

	if o.R == nil {
		o.R = &screeningR{
			Bookings: related,
		}
	} else {
		o.R.Bookings = append(o.R.Bookings, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &bookingR{
				Screening: o,
			}
		} else {
			rel.R.Screening = o
		}
	}
	return nil
}

// Screenings retrieves all the records using an executor.
func Screenings(mods ...qm.QueryMod) screeningQuery {
	mods = append(mods, qm.From("`screenings`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`screenings`.*"})
	}

	return screeningQuery{q}
}

// FindScreeningG retrieves a single record by ID.
func FindScreeningG(ctx context.Context, iD int, selectCols ...string) (*Screening, error) {
	return FindScreening(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindScreening retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindScreening(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Screening, error) {
	screeningObj := &Screening{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `screenings` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, screeningObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from screenings")
	}

	if err = screeningObj.doAfterSelectHooks(ctx, exec); err != nil {
		return screeningObj, err
	}

	return screeningObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Screening) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Screening) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no screenings provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(screeningColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	screeningInsertCacheMut.RLock()
	cache, cached := screeningInsertCache[key]
	screeningInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			screeningAllColumns,
			screeningColumnsWithDefault,
			screeningColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(screeningType, screeningMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(screeningType, screeningMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `screenings` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `screenings` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `screenings` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, screeningPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into screenings")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == screeningMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for screenings")
	}

CacheNoHooks:
	if !cached {
		screeningInsertCacheMut.Lock()
		screeningInsertCache[key] = cache
		screeningInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Screening record using the global executor.
// See Update for more documentation.
func (o *Screening) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Screening.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Screening) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	screeningUpdateCacheMut.RLock()
	cache, cached := screeningUpdateCache[key]
	screeningUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			screeningAllColumns,
			screeningPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update screenings, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `screenings` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, screeningPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(screeningType, screeningMapping, append(wl, screeningPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update screenings row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for screenings")
	}

	if !cached {
		screeningUpdateCacheMut.Lock()
		screeningUpdateCache[key] = cache
		screeningUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q screeningQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q screeningQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for screenings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for screenings")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ScreeningSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ScreeningSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), screeningPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `screenings` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, screeningPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in screening slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all screening")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Screening) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

var mySQLScreeningUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Screening) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no screenings provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(screeningColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLScreeningUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	screeningUpsertCacheMut.RLock()
	cache, cached := screeningUpsertCache[key]
	screeningUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			screeningAllColumns,
			screeningColumnsWithDefault,
			screeningColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			screeningAllColumns,
			screeningPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert screenings, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`screenings`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `screenings` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(screeningType, screeningMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(screeningType, screeningMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for screenings")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == screeningMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(screeningType, screeningMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for screenings")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for screenings")
	}

CacheNoHooks:
	if !cached {
		screeningUpsertCacheMut.Lock()
		screeningUpsertCache[key] = cache
		screeningUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Screening record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Screening) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Screening record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Screening) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Screening provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), screeningPrimaryKeyMapping)
	sql := "DELETE FROM `screenings` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from screenings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for screenings")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q screeningQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q screeningQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no screeningQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from screenings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for screenings")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o ScreeningSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ScreeningSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(screeningBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), screeningPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `screenings` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, screeningPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from screening slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for screenings")
	}

	if len(screeningAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Screening) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no Screening provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Screening) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindScreening(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ScreeningSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty ScreeningSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ScreeningSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ScreeningSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), screeningPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `screenings`.* FROM `screenings` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, screeningPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ScreeningSlice")
	}

	*o = slice

	return nil
}

// ScreeningExistsG checks if the Screening row exists.
func ScreeningExistsG(ctx context.Context, iD int) (bool, error) {
	return ScreeningExists(ctx, boil.GetContextDB(), iD)
}

// ScreeningExists checks if the Screening row exists.
func ScreeningExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `screenings` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if screenings exists")
	}

	return exists, nil
}

// Exists checks if the Screening row exists.
func (o *Screening) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ScreeningExists(ctx, exec, o.ID)
}
