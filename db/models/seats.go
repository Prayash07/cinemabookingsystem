// Code generated by SQLBoiler 4.14.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Seat is an object representing the database table.
type Seat struct {
	ID     int    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Row    string `boil:"row" json:"row" toml:"row" yaml:"row"`
	Number int    `boil:"number" json:"number" toml:"number" yaml:"number"`
	RoomID int    `boil:"room_id" json:"room_id" toml:"room_id" yaml:"room_id"`

	R *seatR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L seatL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SeatColumns = struct {
	ID     string
	Row    string
	Number string
	RoomID string
}{
	ID:     "id",
	Row:    "row",
	Number: "number",
	RoomID: "room_id",
}

var SeatTableColumns = struct {
	ID     string
	Row    string
	Number string
	RoomID string
}{
	ID:     "seats.id",
	Row:    "seats.row",
	Number: "seats.number",
	RoomID: "seats.room_id",
}

// Generated where

var SeatWhere = struct {
	ID     whereHelperint
	Row    whereHelperstring
	Number whereHelperint
	RoomID whereHelperint
}{
	ID:     whereHelperint{field: "`seats`.`id`"},
	Row:    whereHelperstring{field: "`seats`.`row`"},
	Number: whereHelperint{field: "`seats`.`number`"},
	RoomID: whereHelperint{field: "`seats`.`room_id`"},
}

// SeatRels is where relationship names are stored.
var SeatRels = struct {
	Room          string
	ReservedSeats string
}{
	Room:          "Room",
	ReservedSeats: "ReservedSeats",
}

// seatR is where relationships are stored.
type seatR struct {
	Room          *Room             `boil:"Room" json:"Room" toml:"Room" yaml:"Room"`
	ReservedSeats ReservedSeatSlice `boil:"ReservedSeats" json:"ReservedSeats" toml:"ReservedSeats" yaml:"ReservedSeats"`
}

// NewStruct creates a new relationship struct
func (*seatR) NewStruct() *seatR {
	return &seatR{}
}

func (r *seatR) GetRoom() *Room {
	if r == nil {
		return nil
	}
	return r.Room
}

func (r *seatR) GetReservedSeats() ReservedSeatSlice {
	if r == nil {
		return nil
	}
	return r.ReservedSeats
}

// seatL is where Load methods for each relationship are stored.
type seatL struct{}

var (
	seatAllColumns            = []string{"id", "row", "number", "room_id"}
	seatColumnsWithoutDefault = []string{"row", "number", "room_id"}
	seatColumnsWithDefault    = []string{"id"}
	seatPrimaryKeyColumns     = []string{"id"}
	seatGeneratedColumns      = []string{}
)

type (
	// SeatSlice is an alias for a slice of pointers to Seat.
	// This should almost always be used instead of []Seat.
	SeatSlice []*Seat
	// SeatHook is the signature for custom Seat hook methods
	SeatHook func(context.Context, boil.ContextExecutor, *Seat) error

	seatQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	seatType                 = reflect.TypeOf(&Seat{})
	seatMapping              = queries.MakeStructMapping(seatType)
	seatPrimaryKeyMapping, _ = queries.BindMapping(seatType, seatMapping, seatPrimaryKeyColumns)
	seatInsertCacheMut       sync.RWMutex
	seatInsertCache          = make(map[string]insertCache)
	seatUpdateCacheMut       sync.RWMutex
	seatUpdateCache          = make(map[string]updateCache)
	seatUpsertCacheMut       sync.RWMutex
	seatUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var seatAfterSelectHooks []SeatHook

var seatBeforeInsertHooks []SeatHook
var seatAfterInsertHooks []SeatHook

var seatBeforeUpdateHooks []SeatHook
var seatAfterUpdateHooks []SeatHook

var seatBeforeDeleteHooks []SeatHook
var seatAfterDeleteHooks []SeatHook

var seatBeforeUpsertHooks []SeatHook
var seatAfterUpsertHooks []SeatHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Seat) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seatAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Seat) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seatBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Seat) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seatAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Seat) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seatBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Seat) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seatAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Seat) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seatBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Seat) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seatAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Seat) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seatBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Seat) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seatAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSeatHook registers your hook function for all future operations.
func AddSeatHook(hookPoint boil.HookPoint, seatHook SeatHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		seatAfterSelectHooks = append(seatAfterSelectHooks, seatHook)
	case boil.BeforeInsertHook:
		seatBeforeInsertHooks = append(seatBeforeInsertHooks, seatHook)
	case boil.AfterInsertHook:
		seatAfterInsertHooks = append(seatAfterInsertHooks, seatHook)
	case boil.BeforeUpdateHook:
		seatBeforeUpdateHooks = append(seatBeforeUpdateHooks, seatHook)
	case boil.AfterUpdateHook:
		seatAfterUpdateHooks = append(seatAfterUpdateHooks, seatHook)
	case boil.BeforeDeleteHook:
		seatBeforeDeleteHooks = append(seatBeforeDeleteHooks, seatHook)
	case boil.AfterDeleteHook:
		seatAfterDeleteHooks = append(seatAfterDeleteHooks, seatHook)
	case boil.BeforeUpsertHook:
		seatBeforeUpsertHooks = append(seatBeforeUpsertHooks, seatHook)
	case boil.AfterUpsertHook:
		seatAfterUpsertHooks = append(seatAfterUpsertHooks, seatHook)
	}
}

// OneG returns a single seat record from the query using the global executor.
func (q seatQuery) OneG(ctx context.Context) (*Seat, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single seat record from the query.
func (q seatQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Seat, error) {
	o := &Seat{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for seats")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Seat records from the query using the global executor.
func (q seatQuery) AllG(ctx context.Context) (SeatSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Seat records from the query.
func (q seatQuery) All(ctx context.Context, exec boil.ContextExecutor) (SeatSlice, error) {
	var o []*Seat

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Seat slice")
	}

	if len(seatAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Seat records in the query using the global executor
func (q seatQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Seat records in the query.
func (q seatQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count seats rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q seatQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q seatQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if seats exists")
	}

	return count > 0, nil
}

// Room pointed to by the foreign key.
func (o *Seat) Room(mods ...qm.QueryMod) roomQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.RoomID),
	}

	queryMods = append(queryMods, mods...)

	return Rooms(queryMods...)
}

// ReservedSeats retrieves all the reserved_seat's ReservedSeats with an executor.
func (o *Seat) ReservedSeats(mods ...qm.QueryMod) reservedSeatQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`reserved_seat`.`seat_id`=?", o.ID),
	)

	return ReservedSeats(queryMods...)
}

// LoadRoom allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (seatL) LoadRoom(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSeat interface{}, mods queries.Applicator) error {
	var slice []*Seat
	var object *Seat

	if singular {
		var ok bool
		object, ok = maybeSeat.(*Seat)
		if !ok {
			object = new(Seat)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSeat)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSeat))
			}
		}
	} else {
		s, ok := maybeSeat.(*[]*Seat)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSeat)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSeat))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &seatR{}
		}
		args = append(args, object.RoomID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &seatR{}
			}

			for _, a := range args {
				if a == obj.RoomID {
					continue Outer
				}
			}

			args = append(args, obj.RoomID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`rooms`),
		qm.WhereIn(`rooms.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Room")
	}

	var resultSlice []*Room
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Room")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for rooms")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for rooms")
	}

	if len(roomAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Room = foreign
		if foreign.R == nil {
			foreign.R = &roomR{}
		}
		foreign.R.Seats = append(foreign.R.Seats, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RoomID == foreign.ID {
				local.R.Room = foreign
				if foreign.R == nil {
					foreign.R = &roomR{}
				}
				foreign.R.Seats = append(foreign.R.Seats, local)
				break
			}
		}
	}

	return nil
}

// LoadReservedSeats allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (seatL) LoadReservedSeats(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSeat interface{}, mods queries.Applicator) error {
	var slice []*Seat
	var object *Seat

	if singular {
		var ok bool
		object, ok = maybeSeat.(*Seat)
		if !ok {
			object = new(Seat)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSeat)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSeat))
			}
		}
	} else {
		s, ok := maybeSeat.(*[]*Seat)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSeat)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSeat))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &seatR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &seatR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`reserved_seat`),
		qm.WhereIn(`reserved_seat.seat_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load reserved_seat")
	}

	var resultSlice []*ReservedSeat
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice reserved_seat")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on reserved_seat")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for reserved_seat")
	}

	if len(reservedSeatAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ReservedSeats = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &reservedSeatR{}
			}
			foreign.R.Seat = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SeatID {
				local.R.ReservedSeats = append(local.R.ReservedSeats, foreign)
				if foreign.R == nil {
					foreign.R = &reservedSeatR{}
				}
				foreign.R.Seat = local
				break
			}
		}
	}

	return nil
}

// SetRoomG of the seat to the related item.
// Sets o.R.Room to related.
// Adds o to related.R.Seats.
// Uses the global database handle.
func (o *Seat) SetRoomG(ctx context.Context, insert bool, related *Room) error {
	return o.SetRoom(ctx, boil.GetContextDB(), insert, related)
}

// SetRoom of the seat to the related item.
// Sets o.R.Room to related.
// Adds o to related.R.Seats.
func (o *Seat) SetRoom(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Room) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `seats` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"room_id"}),
		strmangle.WhereClause("`", "`", 0, seatPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RoomID = related.ID
	if o.R == nil {
		o.R = &seatR{
			Room: related,
		}
	} else {
		o.R.Room = related
	}

	if related.R == nil {
		related.R = &roomR{
			Seats: SeatSlice{o},
		}
	} else {
		related.R.Seats = append(related.R.Seats, o)
	}

	return nil
}

// AddReservedSeatsG adds the given related objects to the existing relationships
// of the seat, optionally inserting them as new records.
// Appends related to o.R.ReservedSeats.
// Sets related.R.Seat appropriately.
// Uses the global database handle.
func (o *Seat) AddReservedSeatsG(ctx context.Context, insert bool, related ...*ReservedSeat) error {
	return o.AddReservedSeats(ctx, boil.GetContextDB(), insert, related...)
}

// AddReservedSeats adds the given related objects to the existing relationships
// of the seat, optionally inserting them as new records.
// Appends related to o.R.ReservedSeats.
// Sets related.R.Seat appropriately.
func (o *Seat) AddReservedSeats(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ReservedSeat) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SeatID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `reserved_seat` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"seat_id"}),
				strmangle.WhereClause("`", "`", 0, reservedSeatPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SeatID = o.ID
		}
	}

	if o.R == nil {
		o.R = &seatR{
			ReservedSeats: related,
		}
	} else {
		o.R.ReservedSeats = append(o.R.ReservedSeats, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &reservedSeatR{
				Seat: o,
			}
		} else {
			rel.R.Seat = o
		}
	}
	return nil
}

// Seats retrieves all the records using an executor.
func Seats(mods ...qm.QueryMod) seatQuery {
	mods = append(mods, qm.From("`seats`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`seats`.*"})
	}

	return seatQuery{q}
}

// FindSeatG retrieves a single record by ID.
func FindSeatG(ctx context.Context, iD int, selectCols ...string) (*Seat, error) {
	return FindSeat(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindSeat retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSeat(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Seat, error) {
	seatObj := &Seat{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `seats` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, seatObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from seats")
	}

	if err = seatObj.doAfterSelectHooks(ctx, exec); err != nil {
		return seatObj, err
	}

	return seatObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Seat) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Seat) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no seats provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(seatColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	seatInsertCacheMut.RLock()
	cache, cached := seatInsertCache[key]
	seatInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			seatAllColumns,
			seatColumnsWithDefault,
			seatColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(seatType, seatMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(seatType, seatMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `seats` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `seats` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `seats` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, seatPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into seats")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == seatMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for seats")
	}

CacheNoHooks:
	if !cached {
		seatInsertCacheMut.Lock()
		seatInsertCache[key] = cache
		seatInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Seat record using the global executor.
// See Update for more documentation.
func (o *Seat) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Seat.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Seat) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	seatUpdateCacheMut.RLock()
	cache, cached := seatUpdateCache[key]
	seatUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			seatAllColumns,
			seatPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update seats, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `seats` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, seatPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(seatType, seatMapping, append(wl, seatPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update seats row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for seats")
	}

	if !cached {
		seatUpdateCacheMut.Lock()
		seatUpdateCache[key] = cache
		seatUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q seatQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q seatQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for seats")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for seats")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o SeatSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SeatSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), seatPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `seats` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, seatPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in seat slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all seat")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Seat) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

var mySQLSeatUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Seat) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no seats provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(seatColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSeatUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	seatUpsertCacheMut.RLock()
	cache, cached := seatUpsertCache[key]
	seatUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			seatAllColumns,
			seatColumnsWithDefault,
			seatColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			seatAllColumns,
			seatPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert seats, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`seats`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `seats` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(seatType, seatMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(seatType, seatMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for seats")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == seatMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(seatType, seatMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for seats")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for seats")
	}

CacheNoHooks:
	if !cached {
		seatUpsertCacheMut.Lock()
		seatUpsertCache[key] = cache
		seatUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Seat record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Seat) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Seat record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Seat) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Seat provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), seatPrimaryKeyMapping)
	sql := "DELETE FROM `seats` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from seats")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for seats")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q seatQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q seatQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no seatQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from seats")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for seats")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o SeatSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SeatSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(seatBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), seatPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `seats` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, seatPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from seat slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for seats")
	}

	if len(seatAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Seat) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no Seat provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Seat) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSeat(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SeatSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty SeatSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SeatSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SeatSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), seatPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `seats`.* FROM `seats` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, seatPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SeatSlice")
	}

	*o = slice

	return nil
}

// SeatExistsG checks if the Seat row exists.
func SeatExistsG(ctx context.Context, iD int) (bool, error) {
	return SeatExists(ctx, boil.GetContextDB(), iD)
}

// SeatExists checks if the Seat row exists.
func SeatExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `seats` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if seats exists")
	}

	return exists, nil
}

// Exists checks if the Seat row exists.
func (o *Seat) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return SeatExists(ctx, exec, o.ID)
}
