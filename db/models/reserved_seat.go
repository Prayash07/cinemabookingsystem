// Code generated by SQLBoiler 4.14.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ReservedSeat is an object representing the database table.
type ReservedSeat struct {
	ID        int `boil:"id" json:"id" toml:"id" yaml:"id"`
	BookingID int `boil:"booking_id" json:"booking_id" toml:"booking_id" yaml:"booking_id"`
	SeatID    int `boil:"seat_id" json:"seat_id" toml:"seat_id" yaml:"seat_id"`

	R *reservedSeatR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L reservedSeatL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ReservedSeatColumns = struct {
	ID        string
	BookingID string
	SeatID    string
}{
	ID:        "id",
	BookingID: "booking_id",
	SeatID:    "seat_id",
}

var ReservedSeatTableColumns = struct {
	ID        string
	BookingID string
	SeatID    string
}{
	ID:        "reserved_seat.id",
	BookingID: "reserved_seat.booking_id",
	SeatID:    "reserved_seat.seat_id",
}

// Generated where

var ReservedSeatWhere = struct {
	ID        whereHelperint
	BookingID whereHelperint
	SeatID    whereHelperint
}{
	ID:        whereHelperint{field: "`reserved_seat`.`id`"},
	BookingID: whereHelperint{field: "`reserved_seat`.`booking_id`"},
	SeatID:    whereHelperint{field: "`reserved_seat`.`seat_id`"},
}

// ReservedSeatRels is where relationship names are stored.
var ReservedSeatRels = struct {
	Booking string
	Seat    string
}{
	Booking: "Booking",
	Seat:    "Seat",
}

// reservedSeatR is where relationships are stored.
type reservedSeatR struct {
	Booking *Booking `boil:"Booking" json:"Booking" toml:"Booking" yaml:"Booking"`
	Seat    *Seat    `boil:"Seat" json:"Seat" toml:"Seat" yaml:"Seat"`
}

// NewStruct creates a new relationship struct
func (*reservedSeatR) NewStruct() *reservedSeatR {
	return &reservedSeatR{}
}

func (r *reservedSeatR) GetBooking() *Booking {
	if r == nil {
		return nil
	}
	return r.Booking
}

func (r *reservedSeatR) GetSeat() *Seat {
	if r == nil {
		return nil
	}
	return r.Seat
}

// reservedSeatL is where Load methods for each relationship are stored.
type reservedSeatL struct{}

var (
	reservedSeatAllColumns            = []string{"id", "booking_id", "seat_id"}
	reservedSeatColumnsWithoutDefault = []string{"booking_id", "seat_id"}
	reservedSeatColumnsWithDefault    = []string{"id"}
	reservedSeatPrimaryKeyColumns     = []string{"id"}
	reservedSeatGeneratedColumns      = []string{}
)

type (
	// ReservedSeatSlice is an alias for a slice of pointers to ReservedSeat.
	// This should almost always be used instead of []ReservedSeat.
	ReservedSeatSlice []*ReservedSeat
	// ReservedSeatHook is the signature for custom ReservedSeat hook methods
	ReservedSeatHook func(context.Context, boil.ContextExecutor, *ReservedSeat) error

	reservedSeatQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	reservedSeatType                 = reflect.TypeOf(&ReservedSeat{})
	reservedSeatMapping              = queries.MakeStructMapping(reservedSeatType)
	reservedSeatPrimaryKeyMapping, _ = queries.BindMapping(reservedSeatType, reservedSeatMapping, reservedSeatPrimaryKeyColumns)
	reservedSeatInsertCacheMut       sync.RWMutex
	reservedSeatInsertCache          = make(map[string]insertCache)
	reservedSeatUpdateCacheMut       sync.RWMutex
	reservedSeatUpdateCache          = make(map[string]updateCache)
	reservedSeatUpsertCacheMut       sync.RWMutex
	reservedSeatUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var reservedSeatAfterSelectHooks []ReservedSeatHook

var reservedSeatBeforeInsertHooks []ReservedSeatHook
var reservedSeatAfterInsertHooks []ReservedSeatHook

var reservedSeatBeforeUpdateHooks []ReservedSeatHook
var reservedSeatAfterUpdateHooks []ReservedSeatHook

var reservedSeatBeforeDeleteHooks []ReservedSeatHook
var reservedSeatAfterDeleteHooks []ReservedSeatHook

var reservedSeatBeforeUpsertHooks []ReservedSeatHook
var reservedSeatAfterUpsertHooks []ReservedSeatHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ReservedSeat) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reservedSeatAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ReservedSeat) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reservedSeatBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ReservedSeat) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reservedSeatAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ReservedSeat) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reservedSeatBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ReservedSeat) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reservedSeatAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ReservedSeat) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reservedSeatBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ReservedSeat) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reservedSeatAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ReservedSeat) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reservedSeatBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ReservedSeat) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reservedSeatAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddReservedSeatHook registers your hook function for all future operations.
func AddReservedSeatHook(hookPoint boil.HookPoint, reservedSeatHook ReservedSeatHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		reservedSeatAfterSelectHooks = append(reservedSeatAfterSelectHooks, reservedSeatHook)
	case boil.BeforeInsertHook:
		reservedSeatBeforeInsertHooks = append(reservedSeatBeforeInsertHooks, reservedSeatHook)
	case boil.AfterInsertHook:
		reservedSeatAfterInsertHooks = append(reservedSeatAfterInsertHooks, reservedSeatHook)
	case boil.BeforeUpdateHook:
		reservedSeatBeforeUpdateHooks = append(reservedSeatBeforeUpdateHooks, reservedSeatHook)
	case boil.AfterUpdateHook:
		reservedSeatAfterUpdateHooks = append(reservedSeatAfterUpdateHooks, reservedSeatHook)
	case boil.BeforeDeleteHook:
		reservedSeatBeforeDeleteHooks = append(reservedSeatBeforeDeleteHooks, reservedSeatHook)
	case boil.AfterDeleteHook:
		reservedSeatAfterDeleteHooks = append(reservedSeatAfterDeleteHooks, reservedSeatHook)
	case boil.BeforeUpsertHook:
		reservedSeatBeforeUpsertHooks = append(reservedSeatBeforeUpsertHooks, reservedSeatHook)
	case boil.AfterUpsertHook:
		reservedSeatAfterUpsertHooks = append(reservedSeatAfterUpsertHooks, reservedSeatHook)
	}
}

// OneG returns a single reservedSeat record from the query using the global executor.
func (q reservedSeatQuery) OneG(ctx context.Context) (*ReservedSeat, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single reservedSeat record from the query.
func (q reservedSeatQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ReservedSeat, error) {
	o := &ReservedSeat{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for reserved_seat")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all ReservedSeat records from the query using the global executor.
func (q reservedSeatQuery) AllG(ctx context.Context) (ReservedSeatSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all ReservedSeat records from the query.
func (q reservedSeatQuery) All(ctx context.Context, exec boil.ContextExecutor) (ReservedSeatSlice, error) {
	var o []*ReservedSeat

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ReservedSeat slice")
	}

	if len(reservedSeatAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all ReservedSeat records in the query using the global executor
func (q reservedSeatQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all ReservedSeat records in the query.
func (q reservedSeatQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count reserved_seat rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q reservedSeatQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q reservedSeatQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if reserved_seat exists")
	}

	return count > 0, nil
}

// Booking pointed to by the foreign key.
func (o *ReservedSeat) Booking(mods ...qm.QueryMod) bookingQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.BookingID),
	}

	queryMods = append(queryMods, mods...)

	return Bookings(queryMods...)
}

// Seat pointed to by the foreign key.
func (o *ReservedSeat) Seat(mods ...qm.QueryMod) seatQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.SeatID),
	}

	queryMods = append(queryMods, mods...)

	return Seats(queryMods...)
}

// LoadBooking allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (reservedSeatL) LoadBooking(ctx context.Context, e boil.ContextExecutor, singular bool, maybeReservedSeat interface{}, mods queries.Applicator) error {
	var slice []*ReservedSeat
	var object *ReservedSeat

	if singular {
		var ok bool
		object, ok = maybeReservedSeat.(*ReservedSeat)
		if !ok {
			object = new(ReservedSeat)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeReservedSeat)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeReservedSeat))
			}
		}
	} else {
		s, ok := maybeReservedSeat.(*[]*ReservedSeat)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeReservedSeat)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeReservedSeat))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &reservedSeatR{}
		}
		args = append(args, object.BookingID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &reservedSeatR{}
			}

			for _, a := range args {
				if a == obj.BookingID {
					continue Outer
				}
			}

			args = append(args, obj.BookingID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`bookings`),
		qm.WhereIn(`bookings.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Booking")
	}

	var resultSlice []*Booking
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Booking")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for bookings")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for bookings")
	}

	if len(bookingAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Booking = foreign
		if foreign.R == nil {
			foreign.R = &bookingR{}
		}
		foreign.R.ReservedSeats = append(foreign.R.ReservedSeats, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BookingID == foreign.ID {
				local.R.Booking = foreign
				if foreign.R == nil {
					foreign.R = &bookingR{}
				}
				foreign.R.ReservedSeats = append(foreign.R.ReservedSeats, local)
				break
			}
		}
	}

	return nil
}

// LoadSeat allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (reservedSeatL) LoadSeat(ctx context.Context, e boil.ContextExecutor, singular bool, maybeReservedSeat interface{}, mods queries.Applicator) error {
	var slice []*ReservedSeat
	var object *ReservedSeat

	if singular {
		var ok bool
		object, ok = maybeReservedSeat.(*ReservedSeat)
		if !ok {
			object = new(ReservedSeat)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeReservedSeat)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeReservedSeat))
			}
		}
	} else {
		s, ok := maybeReservedSeat.(*[]*ReservedSeat)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeReservedSeat)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeReservedSeat))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &reservedSeatR{}
		}
		args = append(args, object.SeatID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &reservedSeatR{}
			}

			for _, a := range args {
				if a == obj.SeatID {
					continue Outer
				}
			}

			args = append(args, obj.SeatID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`seats`),
		qm.WhereIn(`seats.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Seat")
	}

	var resultSlice []*Seat
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Seat")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for seats")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for seats")
	}

	if len(seatAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Seat = foreign
		if foreign.R == nil {
			foreign.R = &seatR{}
		}
		foreign.R.ReservedSeats = append(foreign.R.ReservedSeats, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SeatID == foreign.ID {
				local.R.Seat = foreign
				if foreign.R == nil {
					foreign.R = &seatR{}
				}
				foreign.R.ReservedSeats = append(foreign.R.ReservedSeats, local)
				break
			}
		}
	}

	return nil
}

// SetBookingG of the reservedSeat to the related item.
// Sets o.R.Booking to related.
// Adds o to related.R.ReservedSeats.
// Uses the global database handle.
func (o *ReservedSeat) SetBookingG(ctx context.Context, insert bool, related *Booking) error {
	return o.SetBooking(ctx, boil.GetContextDB(), insert, related)
}

// SetBooking of the reservedSeat to the related item.
// Sets o.R.Booking to related.
// Adds o to related.R.ReservedSeats.
func (o *ReservedSeat) SetBooking(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Booking) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `reserved_seat` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"booking_id"}),
		strmangle.WhereClause("`", "`", 0, reservedSeatPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BookingID = related.ID
	if o.R == nil {
		o.R = &reservedSeatR{
			Booking: related,
		}
	} else {
		o.R.Booking = related
	}

	if related.R == nil {
		related.R = &bookingR{
			ReservedSeats: ReservedSeatSlice{o},
		}
	} else {
		related.R.ReservedSeats = append(related.R.ReservedSeats, o)
	}

	return nil
}

// SetSeatG of the reservedSeat to the related item.
// Sets o.R.Seat to related.
// Adds o to related.R.ReservedSeats.
// Uses the global database handle.
func (o *ReservedSeat) SetSeatG(ctx context.Context, insert bool, related *Seat) error {
	return o.SetSeat(ctx, boil.GetContextDB(), insert, related)
}

// SetSeat of the reservedSeat to the related item.
// Sets o.R.Seat to related.
// Adds o to related.R.ReservedSeats.
func (o *ReservedSeat) SetSeat(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Seat) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `reserved_seat` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"seat_id"}),
		strmangle.WhereClause("`", "`", 0, reservedSeatPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SeatID = related.ID
	if o.R == nil {
		o.R = &reservedSeatR{
			Seat: related,
		}
	} else {
		o.R.Seat = related
	}

	if related.R == nil {
		related.R = &seatR{
			ReservedSeats: ReservedSeatSlice{o},
		}
	} else {
		related.R.ReservedSeats = append(related.R.ReservedSeats, o)
	}

	return nil
}

// ReservedSeats retrieves all the records using an executor.
func ReservedSeats(mods ...qm.QueryMod) reservedSeatQuery {
	mods = append(mods, qm.From("`reserved_seat`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`reserved_seat`.*"})
	}

	return reservedSeatQuery{q}
}

// FindReservedSeatG retrieves a single record by ID.
func FindReservedSeatG(ctx context.Context, iD int, selectCols ...string) (*ReservedSeat, error) {
	return FindReservedSeat(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindReservedSeat retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindReservedSeat(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ReservedSeat, error) {
	reservedSeatObj := &ReservedSeat{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `reserved_seat` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, reservedSeatObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from reserved_seat")
	}

	if err = reservedSeatObj.doAfterSelectHooks(ctx, exec); err != nil {
		return reservedSeatObj, err
	}

	return reservedSeatObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *ReservedSeat) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ReservedSeat) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no reserved_seat provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(reservedSeatColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	reservedSeatInsertCacheMut.RLock()
	cache, cached := reservedSeatInsertCache[key]
	reservedSeatInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			reservedSeatAllColumns,
			reservedSeatColumnsWithDefault,
			reservedSeatColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(reservedSeatType, reservedSeatMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(reservedSeatType, reservedSeatMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `reserved_seat` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `reserved_seat` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `reserved_seat` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, reservedSeatPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into reserved_seat")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == reservedSeatMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for reserved_seat")
	}

CacheNoHooks:
	if !cached {
		reservedSeatInsertCacheMut.Lock()
		reservedSeatInsertCache[key] = cache
		reservedSeatInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single ReservedSeat record using the global executor.
// See Update for more documentation.
func (o *ReservedSeat) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the ReservedSeat.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ReservedSeat) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	reservedSeatUpdateCacheMut.RLock()
	cache, cached := reservedSeatUpdateCache[key]
	reservedSeatUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			reservedSeatAllColumns,
			reservedSeatPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update reserved_seat, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `reserved_seat` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, reservedSeatPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(reservedSeatType, reservedSeatMapping, append(wl, reservedSeatPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update reserved_seat row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for reserved_seat")
	}

	if !cached {
		reservedSeatUpdateCacheMut.Lock()
		reservedSeatUpdateCache[key] = cache
		reservedSeatUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q reservedSeatQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q reservedSeatQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for reserved_seat")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for reserved_seat")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ReservedSeatSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ReservedSeatSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), reservedSeatPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `reserved_seat` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, reservedSeatPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in reservedSeat slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all reservedSeat")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *ReservedSeat) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

var mySQLReservedSeatUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ReservedSeat) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no reserved_seat provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(reservedSeatColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLReservedSeatUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	reservedSeatUpsertCacheMut.RLock()
	cache, cached := reservedSeatUpsertCache[key]
	reservedSeatUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			reservedSeatAllColumns,
			reservedSeatColumnsWithDefault,
			reservedSeatColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			reservedSeatAllColumns,
			reservedSeatPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert reserved_seat, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`reserved_seat`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `reserved_seat` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(reservedSeatType, reservedSeatMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(reservedSeatType, reservedSeatMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for reserved_seat")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == reservedSeatMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(reservedSeatType, reservedSeatMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for reserved_seat")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for reserved_seat")
	}

CacheNoHooks:
	if !cached {
		reservedSeatUpsertCacheMut.Lock()
		reservedSeatUpsertCache[key] = cache
		reservedSeatUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single ReservedSeat record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *ReservedSeat) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single ReservedSeat record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ReservedSeat) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ReservedSeat provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), reservedSeatPrimaryKeyMapping)
	sql := "DELETE FROM `reserved_seat` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from reserved_seat")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for reserved_seat")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q reservedSeatQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q reservedSeatQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no reservedSeatQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from reserved_seat")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for reserved_seat")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o ReservedSeatSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ReservedSeatSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(reservedSeatBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), reservedSeatPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `reserved_seat` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, reservedSeatPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from reservedSeat slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for reserved_seat")
	}

	if len(reservedSeatAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *ReservedSeat) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no ReservedSeat provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ReservedSeat) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindReservedSeat(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ReservedSeatSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty ReservedSeatSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ReservedSeatSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ReservedSeatSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), reservedSeatPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `reserved_seat`.* FROM `reserved_seat` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, reservedSeatPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ReservedSeatSlice")
	}

	*o = slice

	return nil
}

// ReservedSeatExistsG checks if the ReservedSeat row exists.
func ReservedSeatExistsG(ctx context.Context, iD int) (bool, error) {
	return ReservedSeatExists(ctx, boil.GetContextDB(), iD)
}

// ReservedSeatExists checks if the ReservedSeat row exists.
func ReservedSeatExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `reserved_seat` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if reserved_seat exists")
	}

	return exists, nil
}

// Exists checks if the ReservedSeat row exists.
func (o *ReservedSeat) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ReservedSeatExists(ctx, exec, o.ID)
}
